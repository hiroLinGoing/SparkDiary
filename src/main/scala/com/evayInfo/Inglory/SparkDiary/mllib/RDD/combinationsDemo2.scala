package com.evayInfo.Inglory.SparkDiary.mllib.RDD

import org.apache.log4j.{Level, Logger}
import org.apache.spark.SparkConf
import org.apache.spark.sql.SparkSession

/**
 * Created by sunlu on 18/7/4.
 * spark 二元组操作
 */
object combinationsDemo2 {

  def SetLogger = {
    Logger.getLogger("org").setLevel(Level.OFF)
    Logger.getLogger("com").setLevel(Level.OFF)
    System.setProperty("spark.ui.showConsoleProgress", "false")
    Logger.getRootLogger().setLevel(Level.OFF)
  }

  def main(args: Array[String]) {
    SetLogger

    val sparkConf = new SparkConf().setAppName(s"combinationsDemo2").setMaster("local[*]").set("spark.executor.memory", "2g")
    val spark = SparkSession.builder().config(sparkConf).getOrCreate()
    val sc = spark.sparkContext

    val list1 = List(1,3,2,4,5,7,6,9,8)
    // 生成二元组
    val list2 = list1.sorted.combinations(2)
    list2.foreach(println)
    /*
List(1, 2)
List(1, 3)
List(1, 4)
List(1, 5)
List(1, 6)
List(1, 7)
List(1, 8)
List(1, 9)
List(2, 3)
List(2, 4)
List(2, 5)
List(2, 6)
List(2, 7)
List(2, 8)
List(2, 9)
List(3, 4)
List(3, 5)
List(3, 6)
List(3, 7)
List(3, 8)
List(3, 9)
List(4, 5)
List(4, 6)
List(4, 7)
List(4, 8)
List(4, 9)
List(5, 6)
List(5, 7)
List(5, 8)
List(5, 9)
List(6, 7)
List(6, 8)
List(6, 9)
List(7, 8)
List(7, 9)
List(8, 9)
     */
    println("========")
    // 生成三元组
    val list3 = list1.sorted.combinations(3)
    list3.foreach(println)
/*
List(1, 2, 3)
List(1, 2, 4)
List(1, 2, 5)
List(1, 2, 6)
List(1, 2, 7)
List(1, 2, 8)
List(1, 2, 9)
List(1, 3, 4)
List(1, 3, 5)
List(1, 3, 6)
List(1, 3, 7)
List(1, 3, 8)
List(1, 3, 9)
List(1, 4, 5)
List(1, 4, 6)
List(1, 4, 7)
List(1, 4, 8)
List(1, 4, 9)
List(1, 5, 6)
List(1, 5, 7)
List(1, 5, 8)
List(1, 5, 9)
List(1, 6, 7)
List(1, 6, 8)
List(1, 6, 9)
List(1, 7, 8)
List(1, 7, 9)
List(1, 8, 9)
List(2, 3, 4)
List(2, 3, 5)
List(2, 3, 6)
List(2, 3, 7)
List(2, 3, 8)
List(2, 3, 9)
List(2, 4, 5)
List(2, 4, 6)
List(2, 4, 7)
List(2, 4, 8)
List(2, 4, 9)
List(2, 5, 6)
List(2, 5, 7)
List(2, 5, 8)
List(2, 5, 9)
List(2, 6, 7)
List(2, 6, 8)
List(2, 6, 9)
List(2, 7, 8)
List(2, 7, 9)
List(2, 8, 9)
List(3, 4, 5)
List(3, 4, 6)
List(3, 4, 7)
List(3, 4, 8)
List(3, 4, 9)
List(3, 5, 6)
List(3, 5, 7)
List(3, 5, 8)
List(3, 5, 9)
List(3, 6, 7)
List(3, 6, 8)
List(3, 6, 9)
List(3, 7, 8)
List(3, 7, 9)
List(3, 8, 9)
List(4, 5, 6)
List(4, 5, 7)
List(4, 5, 8)
List(4, 5, 9)
List(4, 6, 7)
List(4, 6, 8)
List(4, 6, 9)
List(4, 7, 8)
List(4, 7, 9)
List(4, 8, 9)
List(5, 6, 7)
List(5, 6, 8)
List(5, 6, 9)
List(5, 7, 8)
List(5, 7, 9)
List(5, 8, 9)
List(6, 7, 8)
List(6, 7, 9)
List(6, 8, 9)
List(7, 8, 9)
 */
    println("========")

    val rdd1 = sc.parallelize(Seq(Seq(1,2,3,4,5),Seq(2,1,4,5,6,9),Seq(1,6,3,7,2,4)))
    val rdd2 = rdd1.flatMap(x => x.sorted.combinations(2))
    rdd2.foreach(println)
/*
List(1, 2)
List(1, 2)
List(1, 4)
List(1, 2)
List(1, 5)
List(1, 3)
List(1, 6)
List(1, 3)
List(1, 4)
List(1, 4)
List(1, 9)
List(1, 6)
List(2, 4)
List(1, 7)
List(1, 5)
List(2, 5)
List(2, 3)
List(2, 6)
List(2, 4)
List(2, 3)
List(2, 6)
List(2, 9)
List(2, 7)
List(2, 4)
List(4, 5)
List(2, 5)
List(3, 4)
List(3, 4)
List(3, 6)
List(4, 6)
List(3, 7)
List(3, 5)
List(4, 6)
List(4, 9)
List(4, 7)
List(5, 6)
List(4, 5)
List(5, 9)
List(6, 7)
List(6, 9)
 */
    println("***********")

    val rdd3 = rdd1.map(x => x.sorted.combinations(2))
    rdd3.foreach(println)
    /*
non-empty iterator
non-empty iterator
non-empty iterator
     */




    sc.stop()
    spark.stop()
  }

}
